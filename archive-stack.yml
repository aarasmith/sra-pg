AWSTemplateFormatVersion: 2010-09-09
Description: Stack for the subreddit archiver

Parameters:
  Repo:
    Description: the github repo with the docker compose files
    Type: String
    Default: https://github.com/KermitTech/docker-compose-files.git
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
  EnvironmentType:
    Description: "Specify the Environment type of the stack."
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  # AmiID:
  #   Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  #   Description: "The ID of the AMI."
  #   Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  KeyPairName:
    Description: The key used for this template
    Type: 'AWS::EC2::KeyPair::KeyName'

  DBInstanceIdentifier:
    Type: String
    Default: "archiver-db"
  DBUsername:
    NoEcho: "true"
    Description: Username for Postgresql database access
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: "postgres"
  DBPassword:
    NoEcho: "true"
    Description: Password Postgresql database access
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters.

# Mappings:
#   EnvironmentToInstanceType:
#     dev:
#       InstanceType: t2.nano
#     test:
#       InstanceType: t2.micro
#     prod:
#       InstanceType: t2.small

Resources:
  CodeRunner:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      ImageId: ami-08c40ec9ead489470
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref SshOnlySg
      UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              #INSTALL DOCKER AND DOCKER COMPOSE
              apt-get update
              apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              add-apt-repository \
                "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) \
                stable"
              apt-get update
              apt-get install -y docker-ce
              usermod -aG docker ubuntu
              curl -L https://github.com/docker/compose/releases/download/v2.13.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
  Kafka:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      ImageId: ami-08c40ec9ead489470
      InstanceType: t3.medium
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref KafkaSg
      UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              #INSTALL DOCKER AND DOCKER COMPOSE
              apt-get update
              apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              add-apt-repository \
                "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) \
                stable"
              apt-get update
              apt-get install -y docker-ce
              usermod -aG docker ubuntu
              curl -L https://github.com/docker/compose/releases/download/v2.13.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              #CREATE A DIRECTORY FOR THE DOCKER COMPOSE FILES AND DOWNLOAD THEM FROM GITHUB
              mkdir docker-compose-files
              git clone ${Repo} ./docker-compose-files
              echo INSTANCE_PUBLIC_IP=$(curl http://checkip.amazonaws.com) > docker-compose-files/.env
              docker-compose -f ./docker-compose-files/kafka-docker-compose up -d

  SshOnlySg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [SSH-Only-security-group, !Ref EnvironmentType]]
      GroupDescription: "Allow SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  KafkaSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [Kafka-security-group, !Ref EnvironmentType]]
      GroupDescription: "Allow SSH and Kafka inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: 0.0.0.0/0

  KafkaEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref Kafka
      Tags:
        - Key: Name
          Value: !Join ["-", [kafka-eip, !Ref EnvironmentType]]

  ArchiveDb:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      VPCSecurityGroups:
        - !GetAtt ArchiveDbSg.GroupId
      AllocatedStorage: "10"
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      Tags:
        - Key: Name
          Value: !Join ["-", [archive-rds, !Ref EnvironmentType]]
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  ArchiveDbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [archive-db-security-group, !Ref EnvironmentType]]
      GroupDescription: Allow postgres inbound traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
          # SourceSecurityGroupName:
          #   Ref: WebAppSecurityGroup
      Tags:
        - Key: Name
          Value: !Join ["-", [archive-db-security-group, !Ref EnvironmentType]]

# Outputs:
#   WebsiteURL:
#     Value: !Sub http://${WebAppEIP}
#     Description: WebApp URL

#   WebServerPublicDNS:
#     Description: "Public DNS of EC2 instance"
#     Value: !GetAtt WebAppInstance.PublicDnsName

#   WebAppDatabaseEndpoint:
#     Description: "Connection endpoint for the database"
#     Value: !GetAtt WebAppDatabase.Endpoint.Address